// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
const jwt = require('jsonwebtoken');

// ========== –ù–ê–°–¢–†–û–ô–ö–ò –ì–ï–ù–ï–†–ê–¶–ò–ò JWT ==========

// 1. –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞
// –í–ê–ñ–ù–û: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª–∏–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á –∏ —Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!
const secret = 'your-256-bit-secret';

// 2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É (payload) - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
const payload = {
  LastName: "–ò–≤–∞–Ω–æ–≤",
  MiddleName: "–ò–≤–∞–Ω–æ–≤–∏—á",
  email: "test@domain.ru",
  guid: "0192b9c6-3d08-44f8-9c8b-a1ea3a16d1ff",
  scope: "openid profile email",
  FirstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
  family_name: "–ò–≤–∞–Ω–æ–≤",
  jti: "W5ITWMw6g9EpXc_U78IJV0_v0Dt4itLJKhkj67lRdW9hMmNlNDdjMS00ODMxLTRuOTctYTVmYy03MWY3ZjU1N2ZmMzQ",
  client_id: "rancher-test.mos-tech.moscow",
  exp: 1710160959,
  kfp_ksid: "bc212ded-b599-472b-b6fb-94da6ad6cad5_0",
  middle_name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
  trusted: false,
  iat: 1710157352,
  sub: "535d51d5-7ec8-42dc-a449-25c9066f725e",
  aud: [
    "rancher-test.org"
  ],
  kfp_lvl: "gray",
  crid: "tt5Uht5N6Cn6Vmro5u5LaQ",
  iss: "https://login-tech.ru",
  name: "–ï–≤–≥–µ–Ω–∏–π",
  email_verified: true,
  kfp_rl: "[]",
  amr: [
    "password"
  ]
};

// 3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (header) —Ç–æ–∫–µ–Ω–∞
const header = {
  alg: 'HS256',    // –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏ (HMAC SHA256)
  typ: 'JWT'       // –¢–∏–ø —Ç–æ–∫–µ–Ω–∞
};

// 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const options = {
  header: header,
  // algorithm: 'HS256',    // –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∑–¥–µ—Å—å –≤–º–µ—Å—Ç–æ header
  // audience: '–º–æ—ë-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',    // –î–ª—è –∫–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–∫–µ–Ω
  // issuer: '–º–æ–π-—Å–µ—Ä–≤–µ—Ä',   // –ö—Ç–æ –≤—ã–¥–∞–ª —Ç–æ–∫–µ–Ω
  // jwtid: '—É–Ω–∏–∫–∞–ª—å–Ω—ã–π-id',    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç–æ–∫–µ–Ω–∞
};

// ========== –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê ==========

console.log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞...\n');

try {
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
  const token = jwt.sign(payload, secret, options);
  
  console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n');
  console.log('üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log('–ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:', JSON.stringify(payload, null, 2));
  console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫:', JSON.stringify(header, null, 2));
  console.log('–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:', secret);
  
  console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
  console.log('JWT –¢–æ–∫–µ–Ω:');
  console.log(token);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:');
  const decoded = jwt.verify(token, secret);
  console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(decoded, null, 2));
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  console.log('\nüìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–∞:');
  const parts = token.split('.');
  console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫ (Header):', Buffer.from(parts[0], 'base64').toString());
  console.log('–ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (Payload):', Buffer.from(parts[1], 'base64').toString());
  console.log('–ü–æ–¥–ø–∏—Å—å (Signature):', parts[2]);
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
}

console.log('\n' + '='.repeat(60));
console.log('üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
console.log('1. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –≤—ã—à–µ, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ');
console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é secret');
console.log('3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (exp)');
console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node create-jwt.js');
console.log('='.repeat(60));